import org.jetbrains.intellij.platform.gradle.tasks.VerifyPluginTask.FailureLevel
import app.cash.sqldelight.toolchain.BugsnagKey

plugins {
  alias(libs.plugins.intellij)
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.changelog)
  alias(libs.plugins.ksp)
  id("app.cash.sqldelight.toolchain.compiler")
}

intellijPlatform {
  buildSearchableOptions = false

  pluginConfiguration {
    name = 'SQLDelight'
    dependencies {
      intellijPlatform {
        intellijIdeaCommunity(libs.versions.idea, false)
        bundledPlugin("org.jetbrains.kotlin")
        bundledPlugin("com.intellij.gradle")
        bundledPlugin("com.intellij.java")
        bundledPlugin("org.jetbrains.android")

        pluginVerifier()
        zipSigner()
        instrumentationTools()

        testFramework(org.jetbrains.intellij.platform.gradle.TestFrameworkType.Platform.INSTANCE, libs.versions.idea.get())
        testFramework(org.jetbrains.intellij.platform.gradle.TestFrameworkType.Plugin.Java.INSTANCE, libs.versions.idea.get())
      }
    }
    if (!project.version.endsWith("SNAPSHOT")) {
      tasks.named('patchPluginXml') {
        changeNotes = provider { changelog.get(project.version).toHTML() }
      }
    } else {
      tasks.named('patchPluginXml') {
        version = "$VERSION_NAME-${System.currentTimeMillis()}"
      }
    }
    ideaVersion {
      sinceBuild.set("231.9392.1")
      untilBuild.set(provider { null })
    }
  }
  pluginVerification {
    // See: the verify_intellij job in .github/workflows/PR.yml
    def version = providers.systemProperty("ideaVersion").getOrElse(null)
    if (version != null) {
      ides {
        ide(org.jetbrains.intellij.platform.gradle.IntelliJPlatformType.IntellijIdeaCommunity, version)
      }
    }

    def customFailureLevel = FailureLevel.ALL
    customFailureLevel.remove(FailureLevel.DEPRECATED_API_USAGES)
    customFailureLevel.remove(FailureLevel.EXPERIMENTAL_API_USAGES)
    customFailureLevel.remove(FailureLevel.INTERNAL_API_USAGES)
    customFailureLevel.remove(FailureLevel.NOT_DYNAMIC)
    customFailureLevel.remove(FailureLevel.SCHEDULED_FOR_REMOVAL_API_USAGES)

    failureLevel = customFailureLevel
  }
}

tasks.named('runIde') {
  maxHeapSize = "4g"
}

changelog {
  path = "$rootDir/CHANGELOG.md"
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getPluginToken() {
  return hasProperty('intellijPublishToken') ? intellijPublishToken : ""
}

tasks.named('publishPlugin') {
  token = getPluginToken()
  channels = [isReleaseBuild() ? 'Stable' : 'EAP']
}

repositories {
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  ksp libs.moshiCodegen

  implementation projects.sqldelightCompiler

  implementation libs.sqliteJdbc
  implementation libs.bugsnag
  implementation libs.picnic
  implementation libs.moshi

  testImplementation libs.truth
  testImplementation libs.intellij.android
  testImplementation projects.dialects.sqlite318
}

configurations.named("runtimeClasspath") {
  exclude group: "org.slf4j"
  exclude group: "org.jetbrains.kotlin"
  exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines"
}

def bugsnagKey = tasks.register('bugsnagKey', BugsnagKey)
sourceSets.main {
  kotlin.srcDir(bugsnagKey)
}
