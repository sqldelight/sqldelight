import org.jetbrains.kotlin.konan.target.HostManager
import org.jetbrains.kotlin.gradle.dsl.JsModuleKind
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeOutputKind

plugins {
  alias(libs.plugins.kotlin.multiplatform)
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
  id("app.cash.sqldelight.toolchain.runtime")
}

base {
  archivesName = 'sqldelight-androidx-paging3'
}

kotlin {
  jvm()

  [js(), wasmJs()].each {
    it.browser {
      it.testTask {
        it.useKarma {
          it.useChromeHeadless()
        }
        // JS & Wasm currently don't have a compatible driver
        it.enabled = false
      }
    }
    it.compilerOptions {
      it.moduleKind.set(JsModuleKind.MODULE_UMD)
    }
  }

  // tier 1
  linuxX64()
  macosX64()
  macosArm64()
  iosSimulatorArm64()
  iosX64()

  // tier 2
  linuxArm64()
  watchosSimulatorArm64()
  watchosX64()
  watchosArm32()
  watchosArm64()
  tvosSimulatorArm64()
  tvosX64()
  tvosArm64()
  iosArm64()

  // tier 3
//  androidNativeArm32()
//  androidNativeArm64()
//  androidNativeX86()
//  androidNativeX64()
  mingwX64()
  watchosDeviceArm64()

  applyDefaultHierarchyTemplate {
    it.common {
      it.group("web") {
        it.withJs()
        it.withWasmJs()
      }
    }
  }

  sourceSets {
    commonMain {
      dependencies {
        api projects.runtime
        api libs.androidx.paging.common
        implementation libs.kotlin.coroutines.core
      }
    }
    commonTest {
      dependencies {
        implementation libs.kotlin.test
        implementation libs.kotlin.coroutines.test
      }
    }
    nativeTest {
      dependencies {
        implementation projects.drivers.nativeDriver
      }
    }
    jvmTest {
      dependencies {
        implementation projects.drivers.sqliteDriver
      }
    }
  }

  configure([targets.iosX64, targets.iosArm64, targets.tvosX64, targets.tvosArm64, targets.watchosX64, targets.watchosArm32, targets.watchosArm64, targets.macosX64, targets.macosArm64, targets.iosSimulatorArm64, targets.watchosSimulatorArm64, targets.tvosSimulatorArm64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-lsqlite3"]
      }
    }
  }

  configure([targets.linuxX64]) {
    compilations.configureEach {
      if (name == "test") {
        cinterops {
          sqlite {
            // use sqlite3 amalgamation on linux tests to prevent linking issues on new linux distros with dependency libraries which are to recent (for example glibc)
            // see: https://github.com/touchlab/SQLiter/pull/38#issuecomment-867171789
            defFile = new File("$rootDir/libs/linux/cinterop/sqlite3.def")
          }
        }
      }
    }
  }

  configure([targets.mingwX64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-Lc:\\msys64\\mingw64\\lib", "-L$rootDir\\libs\\windows".toString(), "-lsqlite3"]
      }
    }
  }
}

//linking fails for the linux test build if not built on a linux host
//ensure the tests and linking for them is only done on linux hosts
tasks.named("linuxX64Test") { enabled = HostManager.hostIsLinux }
tasks.named("linkDebugTestLinuxX64") { enabled = HostManager.hostIsLinux }

tasks.named("mingwX64Test") { enabled = HostManager.hostIsMingw }
tasks.named("linkDebugTestMingwX64") { enabled = HostManager.hostIsMingw }

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
